// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="adder,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.016000,HLS_SYN_LAT=130,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=225,HLS_SYN_LUT=268,HLS_VERSION=2019_1}" *)

module adder (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_TDATA,
        a_TVALID,
        a_TREADY,
        b_TDATA,
        b_TVALID,
        b_TREADY,
        c_TDATA,
        c_TVALID,
        c_TREADY
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] a_TDATA;
input   a_TVALID;
output   a_TREADY;
input  [31:0] b_TDATA;
input   b_TVALID;
output   b_TREADY;
output  [31:0] c_TDATA;
output   c_TVALID;
input   c_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] a_0_data_out;
wire    a_0_vld_in;
wire    a_0_vld_out;
wire    a_0_ack_in;
reg    a_0_ack_out;
reg   [31:0] a_0_payload_A;
reg   [31:0] a_0_payload_B;
reg    a_0_sel_rd;
reg    a_0_sel_wr;
wire    a_0_sel;
wire    a_0_load_A;
wire    a_0_load_B;
reg   [1:0] a_0_state;
wire    a_0_state_cmp_full;
reg   [31:0] b_0_data_out;
wire    b_0_vld_in;
wire    b_0_vld_out;
wire    b_0_ack_in;
reg    b_0_ack_out;
reg   [31:0] b_0_payload_A;
reg   [31:0] b_0_payload_B;
reg    b_0_sel_rd;
reg    b_0_sel_wr;
wire    b_0_sel;
wire    b_0_load_A;
wire    b_0_load_B;
reg   [1:0] b_0_state;
wire    b_0_state_cmp_full;
reg   [31:0] c_1_data_out;
reg    c_1_vld_in;
wire    c_1_vld_out;
wire    c_1_ack_in;
wire    c_1_ack_out;
reg   [31:0] c_1_payload_A;
reg   [31:0] c_1_payload_B;
reg    c_1_sel_rd;
reg    c_1_sel_wr;
wire    c_1_sel;
wire    c_1_load_A;
wire    c_1_load_B;
reg   [1:0] c_1_state;
wire    c_1_state_cmp_full;
reg    a_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln10_reg_97;
reg    b_TDATA_blk_n;
reg    c_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [6:0] i_0_reg_67;
wire   [0:0] icmp_ln10_fu_78_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
wire   [6:0] i_fu_84_p2;
reg   [6:0] i_reg_101;
wire   [31:0] add_ln12_fu_90_p2;
reg    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage1_11001;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_subdone;
reg   [6:0] ap_phi_mux_i_0_phi_fu_71_p4;
reg    ap_block_pp0_stage1_01001;
wire    ap_CS_fsm_state5;
reg    ap_block_state5;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 a_0_sel_rd = 1'b0;
#0 a_0_sel_wr = 1'b0;
#0 a_0_state = 2'd0;
#0 b_0_sel_rd = 1'b0;
#0 b_0_sel_wr = 1'b0;
#0 b_0_state = 2'd0;
#0 c_1_sel_rd = 1'b0;
#0 c_1_sel_wr = 1'b0;
#0 c_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        a_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == a_0_ack_out) & (1'b1 == a_0_vld_out))) begin
            a_0_sel_rd <= ~a_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        a_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == a_0_ack_in) & (1'b1 == a_0_vld_in))) begin
            a_0_sel_wr <= ~a_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        a_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == a_0_state) & (1'b0 == a_0_vld_in)) | ((2'd3 == a_0_state) & (1'b0 == a_0_vld_in) & (1'b1 == a_0_ack_out)))) begin
            a_0_state <= 2'd2;
        end else if ((((2'd1 == a_0_state) & (1'b0 == a_0_ack_out)) | ((2'd3 == a_0_state) & (1'b0 == a_0_ack_out) & (1'b1 == a_0_vld_in)))) begin
            a_0_state <= 2'd1;
        end else if (((~((1'b0 == a_0_vld_in) & (1'b1 == a_0_ack_out)) & ~((1'b0 == a_0_ack_out) & (1'b1 == a_0_vld_in)) & (2'd3 == a_0_state)) | ((2'd1 == a_0_state) & (1'b1 == a_0_ack_out)) | ((2'd2 == a_0_state) & (1'b1 == a_0_vld_in)))) begin
            a_0_state <= 2'd3;
        end else begin
            a_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_0_sel_rd <= 1'b0;
    end else begin
        if (((b_0_ack_out == 1'b1) & (b_0_vld_out == 1'b1))) begin
            b_0_sel_rd <= ~b_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_0_sel_wr <= 1'b0;
    end else begin
        if (((b_0_vld_in == 1'b1) & (b_0_ack_in == 1'b1))) begin
            b_0_sel_wr <= ~b_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_0_state <= 2'd0;
    end else begin
        if ((((b_0_state == 2'd2) & (b_0_vld_in == 1'b0)) | ((b_0_state == 2'd3) & (b_0_vld_in == 1'b0) & (b_0_ack_out == 1'b1)))) begin
            b_0_state <= 2'd2;
        end else if ((((b_0_state == 2'd1) & (b_0_ack_out == 1'b0)) | ((b_0_state == 2'd3) & (b_0_ack_out == 1'b0) & (b_0_vld_in == 1'b1)))) begin
            b_0_state <= 2'd1;
        end else if (((~((b_0_vld_in == 1'b0) & (b_0_ack_out == 1'b1)) & ~((b_0_ack_out == 1'b0) & (b_0_vld_in == 1'b1)) & (b_0_state == 2'd3)) | ((b_0_state == 2'd1) & (b_0_ack_out == 1'b1)) | ((b_0_state == 2'd2) & (b_0_vld_in == 1'b1)))) begin
            b_0_state <= 2'd3;
        end else begin
            b_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        c_1_sel_rd <= 1'b0;
    end else begin
        if (((c_1_ack_out == 1'b1) & (c_1_vld_out == 1'b1))) begin
            c_1_sel_rd <= ~c_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        c_1_sel_wr <= 1'b0;
    end else begin
        if (((c_1_ack_in == 1'b1) & (c_1_vld_in == 1'b1))) begin
            c_1_sel_wr <= ~c_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        c_1_state <= 2'd0;
    end else begin
        if ((((c_1_state == 2'd2) & (c_1_vld_in == 1'b0)) | ((c_1_state == 2'd3) & (c_1_vld_in == 1'b0) & (c_1_ack_out == 1'b1)))) begin
            c_1_state <= 2'd2;
        end else if ((((c_1_state == 2'd1) & (c_TREADY == 1'b0)) | ((c_1_state == 2'd3) & (c_TREADY == 1'b0) & (c_1_vld_in == 1'b1)))) begin
            c_1_state <= 2'd1;
        end else if (((~((c_1_vld_in == 1'b0) & (c_1_ack_out == 1'b1)) & ~((c_TREADY == 1'b0) & (c_1_vld_in == 1'b1)) & (c_1_state == 2'd3)) | ((c_1_state == 2'd1) & (c_1_ack_out == 1'b1)) | ((c_1_state == 2'd2) & (c_1_vld_in == 1'b1)))) begin
            c_1_state <= 2'd3;
        end else begin
            c_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_97 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_67 <= i_reg_101;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_67 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == a_0_load_A)) begin
        a_0_payload_A <= a_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == a_0_load_B)) begin
        a_0_payload_B <= a_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((b_0_load_A == 1'b1)) begin
        b_0_payload_A <= b_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((b_0_load_B == 1'b1)) begin
        b_0_payload_B <= b_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((c_1_load_A == 1'b1)) begin
        c_1_payload_A <= add_ln12_fu_90_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((c_1_load_B == 1'b1)) begin
        c_1_payload_B <= add_ln12_fu_90_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_reg_101 <= i_fu_84_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_reg_97 <= icmp_ln10_fu_78_p2;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_97 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_0_ack_out = 1'b1;
    end else begin
        a_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == a_0_sel)) begin
        a_0_data_out = a_0_payload_B;
    end else begin
        a_0_data_out = a_0_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_97 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_TDATA_blk_n = a_0_state[1'd0];
    end else begin
        a_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_78_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((c_1_state == 2'd1) | ((c_1_state == 2'd3) & (c_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_97 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_71_p4 = i_reg_101;
    end else begin
        ap_phi_mux_i_0_phi_fu_71_p4 = i_0_reg_67;
    end
end

always @ (*) begin
    if ((~((c_1_state == 2'd1) | ((c_1_state == 2'd3) & (c_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_97 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        b_0_ack_out = 1'b1;
    end else begin
        b_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((b_0_sel == 1'b1)) begin
        b_0_data_out = b_0_payload_B;
    end else begin
        b_0_data_out = b_0_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_97 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        b_TDATA_blk_n = b_0_state[1'd0];
    end else begin
        b_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((c_1_sel == 1'b1)) begin
        c_1_data_out = c_1_payload_B;
    end else begin
        c_1_data_out = c_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_97 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        c_1_vld_in = 1'b1;
    end else begin
        c_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln10_reg_97 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln10_reg_97 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        c_TDATA_blk_n = c_1_state[1'd1];
    end else begin
        c_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln10_fu_78_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln10_fu_78_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((c_1_state == 2'd1) | ((c_1_state == 2'd3) & (c_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_0_ack_in = a_0_state[1'd1];

assign a_0_load_A = (~a_0_sel_wr & a_0_state_cmp_full);

assign a_0_load_B = (a_0_state_cmp_full & a_0_sel_wr);

assign a_0_sel = a_0_sel_rd;

assign a_0_state_cmp_full = ((a_0_state != 2'd1) ? 1'b1 : 1'b0);

assign a_0_vld_in = a_TVALID;

assign a_0_vld_out = a_0_state[1'd0];

assign a_TREADY = a_0_state[1'd1];

assign add_ln12_fu_90_p2 = (a_0_data_out + b_0_data_out);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln10_reg_97 == 1'd0) & (b_0_vld_out == 1'b0)) | ((icmp_ln10_reg_97 == 1'd0) & (1'b0 == a_0_vld_out))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln10_reg_97 == 1'd0) & (b_0_vld_out == 1'b0)) | ((icmp_ln10_reg_97 == 1'd0) & (1'b0 == a_0_vld_out))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln10_reg_97 == 1'd0) & (b_0_vld_out == 1'b0)) | ((icmp_ln10_reg_97 == 1'd0) & (1'b0 == a_0_vld_out))));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((icmp_ln10_reg_97 == 1'd0) & (c_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = (((icmp_ln10_reg_97 == 1'd0) & (b_0_vld_out == 1'b0)) | ((icmp_ln10_reg_97 == 1'd0) & (1'b0 == a_0_vld_out)));
end

always @ (*) begin
    ap_block_state4_io = ((icmp_ln10_reg_97 == 1'd0) & (c_1_ack_in == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5 = ((c_1_state == 2'd1) | ((c_1_state == 2'd3) & (c_TREADY == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_0_ack_in = b_0_state[1'd1];

assign b_0_load_A = (~b_0_sel_wr & b_0_state_cmp_full);

assign b_0_load_B = (b_0_state_cmp_full & b_0_sel_wr);

assign b_0_sel = b_0_sel_rd;

assign b_0_state_cmp_full = ((b_0_state != 2'd1) ? 1'b1 : 1'b0);

assign b_0_vld_in = b_TVALID;

assign b_0_vld_out = b_0_state[1'd0];

assign b_TREADY = b_0_state[1'd1];

assign c_1_ack_in = c_1_state[1'd1];

assign c_1_ack_out = c_TREADY;

assign c_1_load_A = (~c_1_sel_wr & c_1_state_cmp_full);

assign c_1_load_B = (c_1_state_cmp_full & c_1_sel_wr);

assign c_1_sel = c_1_sel_rd;

assign c_1_state_cmp_full = ((c_1_state != 2'd1) ? 1'b1 : 1'b0);

assign c_1_vld_out = c_1_state[1'd0];

assign c_TDATA = c_1_data_out;

assign c_TVALID = c_1_state[1'd0];

assign i_fu_84_p2 = (ap_phi_mux_i_0_phi_fu_71_p4 + 7'd1);

assign icmp_ln10_fu_78_p2 = ((ap_phi_mux_i_0_phi_fu_71_p4 == 7'd64) ? 1'b1 : 1'b0);

endmodule //adder
