// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _adder_HH_
#define _adder_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct adder : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > a_TDATA;
    sc_in< sc_logic > a_TVALID;
    sc_out< sc_logic > a_TREADY;
    sc_in< sc_lv<32> > b_TDATA;
    sc_in< sc_logic > b_TVALID;
    sc_out< sc_logic > b_TREADY;
    sc_out< sc_lv<32> > c_TDATA;
    sc_out< sc_logic > c_TVALID;
    sc_in< sc_logic > c_TREADY;


    // Module declarations
    adder(sc_module_name name);
    SC_HAS_PROCESS(adder);

    ~adder();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > a_0_data_out;
    sc_signal< sc_logic > a_0_vld_in;
    sc_signal< sc_logic > a_0_vld_out;
    sc_signal< sc_logic > a_0_ack_in;
    sc_signal< sc_logic > a_0_ack_out;
    sc_signal< sc_lv<32> > a_0_payload_A;
    sc_signal< sc_lv<32> > a_0_payload_B;
    sc_signal< sc_logic > a_0_sel_rd;
    sc_signal< sc_logic > a_0_sel_wr;
    sc_signal< sc_logic > a_0_sel;
    sc_signal< sc_logic > a_0_load_A;
    sc_signal< sc_logic > a_0_load_B;
    sc_signal< sc_lv<2> > a_0_state;
    sc_signal< sc_logic > a_0_state_cmp_full;
    sc_signal< sc_lv<32> > b_0_data_out;
    sc_signal< sc_logic > b_0_vld_in;
    sc_signal< sc_logic > b_0_vld_out;
    sc_signal< sc_logic > b_0_ack_in;
    sc_signal< sc_logic > b_0_ack_out;
    sc_signal< sc_lv<32> > b_0_payload_A;
    sc_signal< sc_lv<32> > b_0_payload_B;
    sc_signal< sc_logic > b_0_sel_rd;
    sc_signal< sc_logic > b_0_sel_wr;
    sc_signal< sc_logic > b_0_sel;
    sc_signal< sc_logic > b_0_load_A;
    sc_signal< sc_logic > b_0_load_B;
    sc_signal< sc_lv<2> > b_0_state;
    sc_signal< sc_logic > b_0_state_cmp_full;
    sc_signal< sc_lv<32> > c_1_data_out;
    sc_signal< sc_logic > c_1_vld_in;
    sc_signal< sc_logic > c_1_vld_out;
    sc_signal< sc_logic > c_1_ack_in;
    sc_signal< sc_logic > c_1_ack_out;
    sc_signal< sc_lv<32> > c_1_payload_A;
    sc_signal< sc_lv<32> > c_1_payload_B;
    sc_signal< sc_logic > c_1_sel_rd;
    sc_signal< sc_logic > c_1_sel_wr;
    sc_signal< sc_logic > c_1_sel;
    sc_signal< sc_logic > c_1_load_A;
    sc_signal< sc_logic > c_1_load_B;
    sc_signal< sc_lv<2> > c_1_state;
    sc_signal< sc_logic > c_1_state_cmp_full;
    sc_signal< sc_logic > a_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<1> > icmp_ln10_reg_97;
    sc_signal< sc_logic > b_TDATA_blk_n;
    sc_signal< sc_logic > c_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<7> > i_0_reg_67;
    sc_signal< sc_lv<1> > icmp_ln10_fu_78_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<7> > i_fu_84_p2;
    sc_signal< sc_lv<7> > i_reg_101;
    sc_signal< sc_lv<32> > add_ln12_fu_90_p2;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_lv<7> > ap_phi_mux_i_0_phi_fu_71_p4;
    sc_signal< bool > ap_block_pp0_stage1_01001;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< bool > ap_block_state5;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_pp0_stage1;
    static const sc_lv<4> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<7> ap_const_lv7_40;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_0_ack_in();
    void thread_a_0_ack_out();
    void thread_a_0_data_out();
    void thread_a_0_load_A();
    void thread_a_0_load_B();
    void thread_a_0_sel();
    void thread_a_0_state_cmp_full();
    void thread_a_0_vld_in();
    void thread_a_0_vld_out();
    void thread_a_TDATA_blk_n();
    void thread_a_TREADY();
    void thread_add_ln12_fu_90_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_01001();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_io();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_io();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_0_phi_fu_71_p4();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_b_0_ack_in();
    void thread_b_0_ack_out();
    void thread_b_0_data_out();
    void thread_b_0_load_A();
    void thread_b_0_load_B();
    void thread_b_0_sel();
    void thread_b_0_state_cmp_full();
    void thread_b_0_vld_in();
    void thread_b_0_vld_out();
    void thread_b_TDATA_blk_n();
    void thread_b_TREADY();
    void thread_c_1_ack_in();
    void thread_c_1_ack_out();
    void thread_c_1_data_out();
    void thread_c_1_load_A();
    void thread_c_1_load_B();
    void thread_c_1_sel();
    void thread_c_1_state_cmp_full();
    void thread_c_1_vld_in();
    void thread_c_1_vld_out();
    void thread_c_TDATA();
    void thread_c_TDATA_blk_n();
    void thread_c_TVALID();
    void thread_i_fu_84_p2();
    void thread_icmp_ln10_fu_78_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
