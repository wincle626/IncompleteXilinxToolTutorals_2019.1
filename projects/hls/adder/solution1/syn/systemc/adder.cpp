// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "adder.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic adder::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic adder::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> adder::ap_ST_fsm_state1 = "1";
const sc_lv<4> adder::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<4> adder::ap_ST_fsm_pp0_stage1 = "100";
const sc_lv<4> adder::ap_ST_fsm_state5 = "1000";
const sc_lv<32> adder::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool adder::ap_const_boolean_1 = true;
const sc_lv<1> adder::ap_const_lv1_0 = "0";
const sc_lv<1> adder::ap_const_lv1_1 = "1";
const sc_lv<2> adder::ap_const_lv2_0 = "00";
const sc_lv<2> adder::ap_const_lv2_2 = "10";
const sc_lv<2> adder::ap_const_lv2_3 = "11";
const sc_lv<2> adder::ap_const_lv2_1 = "1";
const sc_lv<32> adder::ap_const_lv32_2 = "10";
const bool adder::ap_const_boolean_0 = false;
const sc_lv<32> adder::ap_const_lv32_1 = "1";
const sc_lv<7> adder::ap_const_lv7_0 = "0000000";
const sc_lv<7> adder::ap_const_lv7_40 = "1000000";
const sc_lv<7> adder::ap_const_lv7_1 = "1";
const sc_lv<32> adder::ap_const_lv32_3 = "11";

adder::adder(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_0_ack_in);
    sensitive << ( a_0_state );

    SC_METHOD(thread_a_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln10_reg_97 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_a_0_data_out);
    sensitive << ( a_0_payload_A );
    sensitive << ( a_0_payload_B );
    sensitive << ( a_0_sel );

    SC_METHOD(thread_a_0_load_A);
    sensitive << ( a_0_sel_wr );
    sensitive << ( a_0_state_cmp_full );

    SC_METHOD(thread_a_0_load_B);
    sensitive << ( a_0_sel_wr );
    sensitive << ( a_0_state_cmp_full );

    SC_METHOD(thread_a_0_sel);
    sensitive << ( a_0_sel_rd );

    SC_METHOD(thread_a_0_state_cmp_full);
    sensitive << ( a_0_state );

    SC_METHOD(thread_a_0_vld_in);
    sensitive << ( a_TVALID );

    SC_METHOD(thread_a_0_vld_out);
    sensitive << ( a_0_state );

    SC_METHOD(thread_a_TDATA_blk_n);
    sensitive << ( a_0_state );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( icmp_ln10_reg_97 );

    SC_METHOD(thread_a_TREADY);
    sensitive << ( a_0_state );

    SC_METHOD(thread_add_ln12_fu_90_p2);
    sensitive << ( a_0_data_out );
    sensitive << ( b_0_data_out );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state4_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state4_io );

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage1_01001);
    sensitive << ( a_0_vld_out );
    sensitive << ( b_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln10_reg_97 );

    SC_METHOD(thread_ap_block_pp0_stage1_11001);
    sensitive << ( a_0_vld_out );
    sensitive << ( b_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln10_reg_97 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);
    sensitive << ( a_0_vld_out );
    sensitive << ( b_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln10_reg_97 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( c_1_ack_in );
    sensitive << ( icmp_ln10_reg_97 );

    SC_METHOD(thread_ap_block_state3_pp0_stage1_iter0);
    sensitive << ( a_0_vld_out );
    sensitive << ( b_0_vld_out );
    sensitive << ( icmp_ln10_reg_97 );

    SC_METHOD(thread_ap_block_state4_io);
    sensitive << ( c_1_ack_in );
    sensitive << ( icmp_ln10_reg_97 );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state5);
    sensitive << ( c_TREADY );
    sensitive << ( c_1_state );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln10_fu_78_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( c_TREADY );
    sensitive << ( c_1_state );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_mux_i_0_phi_fu_71_p4);
    sensitive << ( icmp_ln10_reg_97 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( i_0_reg_67 );
    sensitive << ( i_reg_101 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( c_TREADY );
    sensitive << ( c_1_state );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_b_0_ack_in);
    sensitive << ( b_0_state );

    SC_METHOD(thread_b_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln10_reg_97 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_b_0_data_out);
    sensitive << ( b_0_payload_A );
    sensitive << ( b_0_payload_B );
    sensitive << ( b_0_sel );

    SC_METHOD(thread_b_0_load_A);
    sensitive << ( b_0_sel_wr );
    sensitive << ( b_0_state_cmp_full );

    SC_METHOD(thread_b_0_load_B);
    sensitive << ( b_0_sel_wr );
    sensitive << ( b_0_state_cmp_full );

    SC_METHOD(thread_b_0_sel);
    sensitive << ( b_0_sel_rd );

    SC_METHOD(thread_b_0_state_cmp_full);
    sensitive << ( b_0_state );

    SC_METHOD(thread_b_0_vld_in);
    sensitive << ( b_TVALID );

    SC_METHOD(thread_b_0_vld_out);
    sensitive << ( b_0_state );

    SC_METHOD(thread_b_TDATA_blk_n);
    sensitive << ( b_0_state );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( icmp_ln10_reg_97 );

    SC_METHOD(thread_b_TREADY);
    sensitive << ( b_0_state );

    SC_METHOD(thread_c_1_ack_in);
    sensitive << ( c_1_state );

    SC_METHOD(thread_c_1_ack_out);
    sensitive << ( c_TREADY );

    SC_METHOD(thread_c_1_data_out);
    sensitive << ( c_1_payload_A );
    sensitive << ( c_1_payload_B );
    sensitive << ( c_1_sel );

    SC_METHOD(thread_c_1_load_A);
    sensitive << ( c_1_sel_wr );
    sensitive << ( c_1_state_cmp_full );

    SC_METHOD(thread_c_1_load_B);
    sensitive << ( c_1_sel_wr );
    sensitive << ( c_1_state_cmp_full );

    SC_METHOD(thread_c_1_sel);
    sensitive << ( c_1_sel_rd );

    SC_METHOD(thread_c_1_state_cmp_full);
    sensitive << ( c_1_state );

    SC_METHOD(thread_c_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln10_reg_97 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_c_1_vld_out);
    sensitive << ( c_1_state );

    SC_METHOD(thread_c_TDATA);
    sensitive << ( c_1_data_out );

    SC_METHOD(thread_c_TDATA_blk_n);
    sensitive << ( c_1_state );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( icmp_ln10_reg_97 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_c_TVALID);
    sensitive << ( c_1_state );

    SC_METHOD(thread_i_fu_84_p2);
    sensitive << ( ap_phi_mux_i_0_phi_fu_71_p4 );

    SC_METHOD(thread_icmp_ln10_fu_78_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_phi_mux_i_0_phi_fu_71_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( c_TREADY );
    sensitive << ( c_1_state );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln10_fu_78_p2 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp0_stage1_subdone );
    sensitive << ( ap_CS_fsm_state5 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0001";
    a_0_sel_rd = SC_LOGIC_0;
    a_0_sel_wr = SC_LOGIC_0;
    a_0_state = "00";
    b_0_sel_rd = SC_LOGIC_0;
    b_0_sel_wr = SC_LOGIC_0;
    b_0_state = "00";
    c_1_sel_rd = SC_LOGIC_0;
    c_1_sel_wr = SC_LOGIC_0;
    c_1_state = "00";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "adder_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_TDATA, "(port)a_TDATA");
    sc_trace(mVcdFile, a_TVALID, "(port)a_TVALID");
    sc_trace(mVcdFile, a_TREADY, "(port)a_TREADY");
    sc_trace(mVcdFile, b_TDATA, "(port)b_TDATA");
    sc_trace(mVcdFile, b_TVALID, "(port)b_TVALID");
    sc_trace(mVcdFile, b_TREADY, "(port)b_TREADY");
    sc_trace(mVcdFile, c_TDATA, "(port)c_TDATA");
    sc_trace(mVcdFile, c_TVALID, "(port)c_TVALID");
    sc_trace(mVcdFile, c_TREADY, "(port)c_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, a_0_data_out, "a_0_data_out");
    sc_trace(mVcdFile, a_0_vld_in, "a_0_vld_in");
    sc_trace(mVcdFile, a_0_vld_out, "a_0_vld_out");
    sc_trace(mVcdFile, a_0_ack_in, "a_0_ack_in");
    sc_trace(mVcdFile, a_0_ack_out, "a_0_ack_out");
    sc_trace(mVcdFile, a_0_payload_A, "a_0_payload_A");
    sc_trace(mVcdFile, a_0_payload_B, "a_0_payload_B");
    sc_trace(mVcdFile, a_0_sel_rd, "a_0_sel_rd");
    sc_trace(mVcdFile, a_0_sel_wr, "a_0_sel_wr");
    sc_trace(mVcdFile, a_0_sel, "a_0_sel");
    sc_trace(mVcdFile, a_0_load_A, "a_0_load_A");
    sc_trace(mVcdFile, a_0_load_B, "a_0_load_B");
    sc_trace(mVcdFile, a_0_state, "a_0_state");
    sc_trace(mVcdFile, a_0_state_cmp_full, "a_0_state_cmp_full");
    sc_trace(mVcdFile, b_0_data_out, "b_0_data_out");
    sc_trace(mVcdFile, b_0_vld_in, "b_0_vld_in");
    sc_trace(mVcdFile, b_0_vld_out, "b_0_vld_out");
    sc_trace(mVcdFile, b_0_ack_in, "b_0_ack_in");
    sc_trace(mVcdFile, b_0_ack_out, "b_0_ack_out");
    sc_trace(mVcdFile, b_0_payload_A, "b_0_payload_A");
    sc_trace(mVcdFile, b_0_payload_B, "b_0_payload_B");
    sc_trace(mVcdFile, b_0_sel_rd, "b_0_sel_rd");
    sc_trace(mVcdFile, b_0_sel_wr, "b_0_sel_wr");
    sc_trace(mVcdFile, b_0_sel, "b_0_sel");
    sc_trace(mVcdFile, b_0_load_A, "b_0_load_A");
    sc_trace(mVcdFile, b_0_load_B, "b_0_load_B");
    sc_trace(mVcdFile, b_0_state, "b_0_state");
    sc_trace(mVcdFile, b_0_state_cmp_full, "b_0_state_cmp_full");
    sc_trace(mVcdFile, c_1_data_out, "c_1_data_out");
    sc_trace(mVcdFile, c_1_vld_in, "c_1_vld_in");
    sc_trace(mVcdFile, c_1_vld_out, "c_1_vld_out");
    sc_trace(mVcdFile, c_1_ack_in, "c_1_ack_in");
    sc_trace(mVcdFile, c_1_ack_out, "c_1_ack_out");
    sc_trace(mVcdFile, c_1_payload_A, "c_1_payload_A");
    sc_trace(mVcdFile, c_1_payload_B, "c_1_payload_B");
    sc_trace(mVcdFile, c_1_sel_rd, "c_1_sel_rd");
    sc_trace(mVcdFile, c_1_sel_wr, "c_1_sel_wr");
    sc_trace(mVcdFile, c_1_sel, "c_1_sel");
    sc_trace(mVcdFile, c_1_load_A, "c_1_load_A");
    sc_trace(mVcdFile, c_1_load_B, "c_1_load_B");
    sc_trace(mVcdFile, c_1_state, "c_1_state");
    sc_trace(mVcdFile, c_1_state_cmp_full, "c_1_state_cmp_full");
    sc_trace(mVcdFile, a_TDATA_blk_n, "a_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, icmp_ln10_reg_97, "icmp_ln10_reg_97");
    sc_trace(mVcdFile, b_TDATA_blk_n, "b_TDATA_blk_n");
    sc_trace(mVcdFile, c_TDATA_blk_n, "c_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, i_0_reg_67, "i_0_reg_67");
    sc_trace(mVcdFile, icmp_ln10_fu_78_p2, "icmp_ln10_fu_78_p2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state4_io, "ap_block_state4_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_fu_84_p2, "i_fu_84_p2");
    sc_trace(mVcdFile, i_reg_101, "i_reg_101");
    sc_trace(mVcdFile, add_ln12_fu_90_p2, "add_ln12_fu_90_p2");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage1_iter0, "ap_block_state3_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, ap_phi_mux_i_0_phi_fu_71_p4, "ap_phi_mux_i_0_phi_fu_71_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage1_01001, "ap_block_pp0_stage1_01001");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_block_state5, "ap_block_state5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("adder.hdltvin.dat");
    mHdltvoutHandle.open("adder.hdltvout.dat");
}

adder::~adder() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void adder::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        a_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, a_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, a_0_vld_out.read()))) {
            a_0_sel_rd =  (sc_logic) (~a_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        a_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, a_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, a_0_ack_in.read()))) {
            a_0_sel_wr =  (sc_logic) (~a_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        a_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, a_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, a_0_ack_out.read()) && 
              esl_seteq<1,2,2>(a_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, a_0_vld_in.read()) && 
              esl_seteq<1,2,2>(a_0_state.read(), ap_const_lv2_2)))) {
            a_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, a_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, a_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(a_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, a_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(a_0_state.read(), ap_const_lv2_1)))) {
            a_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, a_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(a_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, a_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(a_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(a_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, a_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, a_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, a_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, a_0_ack_out.read()))))) {
            a_0_state = ap_const_lv2_3;
        } else {
            a_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0)))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        b_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, b_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, b_0_vld_out.read()))) {
            b_0_sel_rd =  (sc_logic) (~b_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        b_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, b_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, b_0_ack_in.read()))) {
            b_0_sel_wr =  (sc_logic) (~b_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        b_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, b_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, b_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, b_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, b_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, b_0_state.read())))) {
            b_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, b_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, b_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, b_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, b_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, b_0_state.read())))) {
            b_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, b_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, b_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, b_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, b_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, b_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, b_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, b_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, b_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, b_0_ack_out.read()))))) {
            b_0_state = ap_const_lv2_3;
        } else {
            b_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        c_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, c_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, c_1_vld_out.read()))) {
            c_1_sel_rd =  (sc_logic) (~c_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        c_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, c_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, c_1_ack_in.read()))) {
            c_1_sel_wr =  (sc_logic) (~c_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        c_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, c_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, c_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, c_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, c_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, c_1_state.read())))) {
            c_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, c_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, c_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, c_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, c_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, c_1_state.read())))) {
            c_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, c_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, c_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, c_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, c_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, c_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, c_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, c_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, c_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, c_1_ack_out.read()))))) {
            c_1_state = ap_const_lv2_3;
        } else {
            c_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln10_reg_97.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_0_reg_67 = i_reg_101.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_67 = ap_const_lv7_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, a_0_load_A.read())) {
        a_0_payload_A = a_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, a_0_load_B.read())) {
        a_0_payload_B = a_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, b_0_load_A.read())) {
        b_0_payload_A = b_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, b_0_load_B.read())) {
        b_0_payload_B = b_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, c_1_load_A.read())) {
        c_1_payload_A = add_ln12_fu_90_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, c_1_load_B.read())) {
        c_1_payload_B = add_ln12_fu_90_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_reg_101 = i_fu_84_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln10_reg_97 = icmp_ln10_fu_78_p2.read();
    }
}

void adder::thread_a_0_ack_in() {
    a_0_ack_in = a_0_state.read()[1];
}

void adder::thread_a_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln10_reg_97.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        a_0_ack_out = ap_const_logic_1;
    } else {
        a_0_ack_out = ap_const_logic_0;
    }
}

void adder::thread_a_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, a_0_sel.read())) {
        a_0_data_out = a_0_payload_B.read();
    } else {
        a_0_data_out = a_0_payload_A.read();
    }
}

void adder::thread_a_0_load_A() {
    a_0_load_A = (a_0_state_cmp_full.read() & ~a_0_sel_wr.read());
}

void adder::thread_a_0_load_B() {
    a_0_load_B = (a_0_sel_wr.read() & a_0_state_cmp_full.read());
}

void adder::thread_a_0_sel() {
    a_0_sel = a_0_sel_rd.read();
}

void adder::thread_a_0_state_cmp_full() {
    a_0_state_cmp_full =  (sc_logic) ((!a_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(a_0_state.read() != ap_const_lv2_1))[0];
}

void adder::thread_a_0_vld_in() {
    a_0_vld_in = a_TVALID.read();
}

void adder::thread_a_0_vld_out() {
    a_0_vld_out = a_0_state.read()[0];
}

void adder::thread_a_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln10_reg_97.read()))) {
        a_TDATA_blk_n = a_0_state.read()[0];
    } else {
        a_TDATA_blk_n = ap_const_logic_1;
    }
}

void adder::thread_a_TREADY() {
    a_TREADY = a_0_state.read()[1];
}

void adder::thread_add_ln12_fu_90_p2() {
    add_ln12_fu_90_p2 = (!a_0_data_out.read().is_01() || !b_0_data_out.read().is_01())? sc_lv<32>(): (sc_biguint<32>(a_0_data_out.read()) + sc_biguint<32>(b_0_data_out.read()));
}

void adder::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void adder::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[2];
}

void adder::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void adder::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[3];
}

void adder::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void adder::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read()));
}

void adder::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read()));
}

void adder::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void adder::thread_ap_block_pp0_stage1_01001() {
    ap_block_pp0_stage1_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln10_reg_97.read()) && 
   esl_seteq<1,1,1>(ap_const_logic_0, a_0_vld_out.read())) || 
  (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln10_reg_97.read()) && 
   esl_seteq<1,1,1>(ap_const_logic_0, b_0_vld_out.read()))));
}

void adder::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln10_reg_97.read()) && 
   esl_seteq<1,1,1>(ap_const_logic_0, a_0_vld_out.read())) || 
  (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln10_reg_97.read()) && 
   esl_seteq<1,1,1>(ap_const_logic_0, b_0_vld_out.read())) || 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())));
}

void adder::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln10_reg_97.read()) && 
   esl_seteq<1,1,1>(ap_const_logic_0, a_0_vld_out.read())) || 
  (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln10_reg_97.read()) && 
   esl_seteq<1,1,1>(ap_const_logic_0, b_0_vld_out.read())) || 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())));
}

void adder::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void adder::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln10_reg_97.read()) && esl_seteq<1,1,1>(ap_const_logic_0, c_1_ack_in.read()));
}

void adder::thread_ap_block_state3_pp0_stage1_iter0() {
    ap_block_state3_pp0_stage1_iter0 = ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln10_reg_97.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, a_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln10_reg_97.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, b_0_vld_out.read())));
}

void adder::thread_ap_block_state4_io() {
    ap_block_state4_io = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln10_reg_97.read()) && esl_seteq<1,1,1>(ap_const_logic_0, c_1_ack_in.read()));
}

void adder::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void adder::thread_ap_block_state5() {
    ap_block_state5 = (esl_seteq<1,2,2>(ap_const_lv2_1, c_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, c_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, c_1_state.read())));
}

void adder::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln10_fu_78_p2.read())) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void adder::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,2,2>(ap_const_lv2_1, c_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, c_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, c_1_state.read()))))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void adder::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void adder::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void adder::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void adder::thread_ap_phi_mux_i_0_phi_fu_71_p4() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln10_reg_97.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_i_0_phi_fu_71_p4 = i_reg_101.read();
    } else {
        ap_phi_mux_i_0_phi_fu_71_p4 = i_0_reg_67.read();
    }
}

void adder::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,2,2>(ap_const_lv2_1, c_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, c_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, c_1_state.read()))))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void adder::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void adder::thread_b_0_ack_in() {
    b_0_ack_in = b_0_state.read()[1];
}

void adder::thread_b_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln10_reg_97.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        b_0_ack_out = ap_const_logic_1;
    } else {
        b_0_ack_out = ap_const_logic_0;
    }
}

void adder::thread_b_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, b_0_sel.read())) {
        b_0_data_out = b_0_payload_B.read();
    } else {
        b_0_data_out = b_0_payload_A.read();
    }
}

void adder::thread_b_0_load_A() {
    b_0_load_A = (b_0_state_cmp_full.read() & ~b_0_sel_wr.read());
}

void adder::thread_b_0_load_B() {
    b_0_load_B = (b_0_sel_wr.read() & b_0_state_cmp_full.read());
}

void adder::thread_b_0_sel() {
    b_0_sel = b_0_sel_rd.read();
}

void adder::thread_b_0_state_cmp_full() {
    b_0_state_cmp_full =  (sc_logic) ((!b_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(b_0_state.read() != ap_const_lv2_1))[0];
}

void adder::thread_b_0_vld_in() {
    b_0_vld_in = b_TVALID.read();
}

void adder::thread_b_0_vld_out() {
    b_0_vld_out = b_0_state.read()[0];
}

void adder::thread_b_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln10_reg_97.read()))) {
        b_TDATA_blk_n = b_0_state.read()[0];
    } else {
        b_TDATA_blk_n = ap_const_logic_1;
    }
}

void adder::thread_b_TREADY() {
    b_TREADY = b_0_state.read()[1];
}

void adder::thread_c_1_ack_in() {
    c_1_ack_in = c_1_state.read()[1];
}

void adder::thread_c_1_ack_out() {
    c_1_ack_out = c_TREADY.read();
}

void adder::thread_c_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, c_1_sel.read())) {
        c_1_data_out = c_1_payload_B.read();
    } else {
        c_1_data_out = c_1_payload_A.read();
    }
}

void adder::thread_c_1_load_A() {
    c_1_load_A = (c_1_state_cmp_full.read() & ~c_1_sel_wr.read());
}

void adder::thread_c_1_load_B() {
    c_1_load_B = (c_1_sel_wr.read() & c_1_state_cmp_full.read());
}

void adder::thread_c_1_sel() {
    c_1_sel = c_1_sel_rd.read();
}

void adder::thread_c_1_state_cmp_full() {
    c_1_state_cmp_full =  (sc_logic) ((!c_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(c_1_state.read() != ap_const_lv2_1))[0];
}

void adder::thread_c_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln10_reg_97.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        c_1_vld_in = ap_const_logic_1;
    } else {
        c_1_vld_in = ap_const_logic_0;
    }
}

void adder::thread_c_1_vld_out() {
    c_1_vld_out = c_1_state.read()[0];
}

void adder::thread_c_TDATA() {
    c_TDATA = c_1_data_out.read();
}

void adder::thread_c_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln10_reg_97.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln10_reg_97.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        c_TDATA_blk_n = c_1_state.read()[1];
    } else {
        c_TDATA_blk_n = ap_const_logic_1;
    }
}

void adder::thread_c_TVALID() {
    c_TVALID = c_1_state.read()[0];
}

void adder::thread_i_fu_84_p2() {
    i_fu_84_p2 = (!ap_phi_mux_i_0_phi_fu_71_p4.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(ap_phi_mux_i_0_phi_fu_71_p4.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void adder::thread_icmp_ln10_fu_78_p2() {
    icmp_ln10_fu_78_p2 = (!ap_phi_mux_i_0_phi_fu_71_p4.read().is_01() || !ap_const_lv7_40.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_i_0_phi_fu_71_p4.read() == ap_const_lv7_40);
}

void adder::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln10_fu_78_p2.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln10_fu_78_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && !(esl_seteq<1,2,2>(ap_const_lv2_1, c_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, c_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, c_1_state.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void adder::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_TDATA\" :  \"" << a_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_TVALID\" :  \"" << a_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_TREADY\" :  \"" << a_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_TDATA\" :  \"" << b_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_TVALID\" :  \"" << b_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_TREADY\" :  \"" << b_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_TDATA\" :  \"" << c_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_TVALID\" :  \"" << c_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"c_TREADY\" :  \"" << c_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

